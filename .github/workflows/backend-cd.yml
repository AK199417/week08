name: CD - Deploy Backend Services to AKS

on:
  workflow_call:
    outputs:
      product_api_ip:
        description: "Product service External IP"
        value: ${{ jobs.deploy_backend.outputs.PRODUCT_API_IP }}
      order_api_ip:
        description: "Order service External IP"
        value: ${{ jobs.deploy_backend.outputs.ORDER_API_IP }}
  # Optional manual run
  workflow_dispatch: {}

permissions:
  contents: read

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}  # e.g. deakinacr.azurecr.io
  K8S_NAMESPACE: ecommerce
  # Service names used to read LB IPs (update if your YAML differs)
  PRODUCT_SVC_NAME: product-service-w08e1
  ORDER_SVC_NAME:   order-service-w08e1

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production
    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP:   ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - uses: actions/checkout@v4

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: |
          az aks get-credentials \
            --resource-group "${{ secrets.AKS_RESOURCE_GROUP }}" \
            --name "${{ secrets.AKS_CLUSTER_NAME }}" \
            --overwrite-existing

      - name: Ensure namespace exists
        run: |
          kubectl get ns "$K8S_NAMESPACE" >/dev/null 2>&1 || kubectl create ns "$K8S_NAMESPACE"

      - name: Derive SHORT_SHA and ACR name
        run: |
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "ACR_NAME=${ACR_LOGIN_SERVER%%.*}" >> $GITHUB_ENV

      - name: Attach ACR (idempotent, non-interactive)
        run: |
          az aks update \
            -g "${{ secrets.AKS_RESOURCE_GROUP }}" \
            -n "${{ secrets.AKS_CLUSTER_NAME }}" \
            --attach-acr "${{ env.ACR_NAME }}" \
            --yes

      - name: Apply backend infra (ConfigMaps, Secrets, DBs)
        run: |
          kubectl apply -n "$K8S_NAMESPACE" -f k8s/configmaps.yaml
          kubectl apply -n "$K8S_NAMESPACE" -f k8s/secrets.yaml
          kubectl apply -n "$K8S_NAMESPACE" -f k8s/product-db.yaml
          kubectl apply -n "$K8S_NAMESPACE" -f k8s/order-db.yaml

      - name: Apply backend services
        run: |
          kubectl apply -n "$K8S_NAMESPACE" -f k8s/product-service.yaml
          kubectl apply -n "$K8S_NAMESPACE" -f k8s/order-service.yaml

      - name: Pin deployments to SHA images
        run: |
          kubectl set image -n "$K8S_NAMESPACE" deploy/product-service product=${ACR_LOGIN_SERVER}/product_service:${SHORT_SHA} --record || true
          kubectl set image -n "$K8S_NAMESPACE" deploy/order-service   order=${ACR_LOGIN_SERVER}/order_service:${SHORT_SHA} --record || true

      - name: Wait for Backend LoadBalancer IPs
        run: |
          echo "Waiting for EXTERNAL-IPs in namespace $K8S_NAMESPACE..."
          for i in $(seq 1 60); do
            PRODUCT_IP=$(kubectl get svc -n "$K8S_NAMESPACE" "$PRODUCT_SVC_NAME" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            ORDER_IP=$(kubectl get svc -n "$K8S_NAMESPACE" "$ORDER_SVC_NAME"   -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then break; fi
            sleep 5
          done
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "ERROR: Service EXTERNAL-IPs not assigned"; kubectl get svc -n "$K8S_NAMESPACE"; exit 1
          fi
          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP"     >> $GITHUB_ENV

      - id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT
      - id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "### Backend Service IPs (namespace: $K8S_NAMESPACE)" >> $GITHUB_STEP_SUMMARY
          echo "- Product: http://${PRODUCT_IP}:8000" >> $GITHUB_STEP_SUMMARY
          echo "- Order:   http://${ORDER_IP}:8001"   >> $GITHUB_STEP_SUMMARY

      - name: Logout Azure
        if: always()
        run: az logout
