name: CD - Deploy Frontend to AKS

on:
  # Called automatically by backend-cd.yml
  workflow_call:
    inputs:
      product_api_ip:
        description: Product API URL (e.g., http://X.X.X.X:8000)
        required: true
        type: string
      order_api_ip:
        description: Order API URL (e.g., http://Y.Y.Y.Y:8001)
        required: true
        type: string
      # Optional: keep these if backend-cd still passes them; otherwise we'll use secrets
      aks_cluster_name:
        required: false
        type: string
      aks_resource_group:
        required: false
        type: string

  # Optional manual trigger
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'Product API URL'
        required: true
        default: 'http://<ip>:8000'
      order_api_ip:
        description: 'Order API URL'
        required: true
        default: 'http://<ip>:8001'
      aks_cluster_name:
        description: 'AKS Cluster (leave blank to use Environment secret)'
        required: false
      aks_resource_group:
        description: 'AKS RG (leave blank to use Environment secret)'
        required: false

permissions:
  contents: read

env:
  # From Environment secrets (Settings → Environments → Production → Secrets)
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}   # e.g. arulrajahacr.azurecr.io
  K8S_NAMESPACE: ecommerce

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production   # <-- This activates Environment protection rules
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}  # store this in the Production environment

      - name: Derive ACR name and SHORT_SHA
        run: |
          echo "ACR_NAME=${ACR_LOGIN_SERVER%%.*}" >> $GITHUB_ENV
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Inject backend URLs into main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g"   frontend/main.js

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Build & Push frontend (:SHORT_SHA only)
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${SHORT_SHA} ./frontend/
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${SHORT_SHA}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          # Prefer inputs if provided, else fall back to Environment secrets
          resource-group: ${{ inputs.aks_resource_group || secrets.AKS_RESOURCE_GROUP }}
          cluster-name:   ${{ inputs.aks_cluster_name   || secrets.AKS_CLUSTER_NAME }}

      - name: Apply manifests and pin image to SHA tag
        run: |
          kubectl apply -n "$K8S_NAMESPACE" -f k8s/frontend.yaml
          kubectl set image -n "$K8S_NAMESPACE" deploy/frontend \
            frontend=${ACR_LOGIN_SERVER}/frontend:${SHORT_SHA} --record || true
          kubectl rollout status -n "$K8S_NAMESPACE" deploy/frontend --timeout=180s

      - name: Logout Azure
        if: always()
        run: az logout
