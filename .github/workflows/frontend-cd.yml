name: CD - Deploy Frontend to AKS

on:
  workflow_call:
    inputs:
      product_api_ip:
        description: Product API URL (e.g., http://X.X.X.X:8000)
        required: true
        type: string
      order_api_ip:
        description: Order API URL (e.g., http://Y.Y.Y.Y:8001)
        required: true
        type: string
      # Optional inputs; defaults to Environment/Repo secrets if omitted
      aks_cluster_name:
        required: false
        type: string
      aks_resource_group:
        required: false
        type: string
  # Optional manual trigger
  workflow_dispatch: {}

permissions:
  contents: read

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  K8S_NAMESPACE: ecommerce

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: actions/checkout@v4

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Derive ACR name and SHORT_SHA
        run: |
          echo "ACR_NAME=${ACR_LOGIN_SERVER%%.*}" >> $GITHUB_ENV
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Ensure namespace exists
        run: |
          kubectl get ns "$K8S_NAMESPACE" >/dev/null 2>&1 || kubectl create ns "$K8S_NAMESPACE"

      - name: Inject backend URLs into main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g"   frontend/main.js

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Build & Push frontend (:SHORT_SHA only)
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${SHORT_SHA} ./frontend/
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${SHORT_SHA}

      - name: Set AKS context
        run: |
          az aks get-credentials \
            --resource-group "${{ inputs.aks_resource_group || secrets.AKS_RESOURCE_GROUP }}" \
            --name "${{ inputs.aks_cluster_name   || secrets.AKS_CLUSTER_NAME }}" \
            --overwrite-existing

      - name: Apply manifests and pin image to SHA tag
        run: |
          kubectl apply -n "$K8S_NAMESPACE" -f k8s/frontend.yaml
          kubectl set image -n "$K8S_NAMESPACE" deploy/frontend \
            frontend=${ACR_LOGIN_SERVER}/frontend:${SHORT_SHA} --record || true
          kubectl rollout status -n "$K8S_NAMESPACE" deploy/frontend --timeout=180s

      - name: Logout Azure
        if: always()
        run: az logout
